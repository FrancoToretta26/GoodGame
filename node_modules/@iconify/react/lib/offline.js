import React from 'react';
import { fullIcon } from '@iconify/utils/lib/icon';
import { parseIconSet } from '@iconify/utils/lib/icon-set/parse';
import { render } from './render';
/**
 * Storage for icons referred by name
 */
const storage = Object.create(null);
/**
 * Generate icon
 */
function component(props, inline, ref) {
    // Split properties
    const icon = typeof props.icon === 'string'
        ? storage[props.icon]
        : typeof props.icon === 'object'
            ? fullIcon(props.icon)
            : null;
    // Validate icon object
    if (icon === null ||
        typeof icon !== 'object' ||
        typeof icon.body !== 'string') {
        return props.children
            ? props.children
            : React.createElement('span', {});
    }
    // Valid icon: render it
    return render(icon, props, inline, ref);
}
/**
 * Block icon
 *
 * @param props - Component properties
 */
export const Icon = React.forwardRef(function Icon(props, ref) {
    return component(props, false, ref);
});
/**
 * Inline icon (has negative verticalAlign that makes it behave like icon font)
 *
 * @param props - Component properties
 */
export const InlineIcon = React.forwardRef(function InlineIcon(props, ref) {
    return component(props, true, ref);
});
/**
 * Add icon to storage, allowing to call it by name
 *
 * @param name
 * @param data
 */
export function addIcon(name, data) {
    storage[name] = fullIcon(data);
}
/**
 * Add collection to storage, allowing to call icons by name
 *
 * @param data Icon set
 * @param prefix Optional prefix to add to icon names, true (default) if prefix from icon set should be used.
 */
export function addCollection(data, prefix) {
    const iconPrefix = typeof prefix === 'string'
        ? prefix
        : prefix !== false && typeof data.prefix === 'string'
            ? data.prefix + ':'
            : '';
    parseIconSet(data, (name, icon) => {
        if (icon !== null) {
            storage[iconPrefix + name] = icon;
        }
    });
}
