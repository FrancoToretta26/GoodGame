{"ast":null,"code":"import _slicedToArray from \"C:/Users/franc/OneDrive/Documentos/GitHub/material-kit-react-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: {},\n    theme: theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _extends2 = _extends({}, props, options),\n      _extends2$defaultMatc = _extends2.defaultMatches,\n      defaultMatches = _extends2$defaultMatc === void 0 ? false : _extends2$defaultMatc,\n      _extends2$matchMedia = _extends2.matchMedia,\n      matchMedia = _extends2$matchMedia === void 0 ? supportMatchMedia ? window.matchMedia : null : _extends2$matchMedia,\n      _extends2$noSsr = _extends2.noSsr,\n      noSsr = _extends2$noSsr === void 0 ? false : _extends2$noSsr,\n      _extends2$ssrMatchMed = _extends2.ssrMatchMedia,\n      ssrMatchMedia = _extends2$ssrMatchMed === void 0 ? null : _extends2$ssrMatchMed;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      match = _React$useState2[0],\n      setMatch = _React$useState2[1];\n\n  useEnhancedEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["C:/Users/franc/OneDrive/Documentos/GitHub/material-kit-react-main/node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"names":["_extends","React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQuery","queryInput","options","theme","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","useState","matches","match","setMatch","active","undefined","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,sBAAsB,IAAIC,QAAlD,QAAkE,aAAlE;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,eAAe,SAASC,aAAT,CAAuBC,UAAvB,EAAiD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC9D,MAAMC,KAAK,GAAGL,QAAQ,EAAtB;AACA,MAAMM,KAAK,GAAGR,aAAa,CAAC;AAC1BS,IAAAA,IAAI,EAAE,kBADoB;AAE1BD,IAAAA,KAAK,EAAE,EAFmB;AAG1BD,IAAAA,KAAK,EAALA;AAH0B,GAAD,CAA3B;;AAMA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,OAAOP,UAAP,KAAsB,UAAtB,IAAoCE,KAAK,KAAK,IAAlD,EAAwD;AACtDM,MAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,gDAAD,EAAmD,8DAAnD,EAAmH,0DAAnH,EAA+KC,IAA/K,CAAoL,IAApL,CAAd;AACD;AACF;;AAED,MAAIC,KAAK,GAAG,OAAOX,UAAP,KAAsB,UAAtB,GAAmCA,UAAU,CAACE,KAAD,CAA7C,GAAuDF,UAAnE;AACAW,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAR,CAf8D,CAenB;AAC3C;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,UAAd,KAA6B,WAAxF;;AAEA,kBAKItB,QAAQ,CAAC,EAAD,EAAKU,KAAL,EAAYF,OAAZ,CALZ;AAAA,wCACEe,cADF;AAAA,MACEA,cADF,sCACmB,KADnB;AAAA,uCAEED,UAFF;AAAA,MAEEA,UAFF,qCAEeF,iBAAiB,GAAGC,MAAM,CAACC,UAAV,GAAuB,IAFvD;AAAA,kCAGEE,KAHF;AAAA,MAGEA,KAHF,gCAGU,KAHV;AAAA,wCAIEC,aAJF;AAAA,MAIEA,aAJF,sCAIkB,IAJlB;;AAOA,wBAA0BxB,KAAK,CAACyB,QAAN,CAAe,YAAM;AAC7C,QAAIF,KAAK,IAAIJ,iBAAb,EAAgC;AAC9B,aAAOE,UAAU,CAACJ,KAAD,CAAV,CAAkBS,OAAzB;AACD;;AAED,QAAIF,aAAJ,EAAmB;AACjB,aAAOA,aAAa,CAACP,KAAD,CAAb,CAAqBS,OAA5B;AACD,KAP4C,CAO3C;AACF;;;AADE;AACF;AAGA,WAAOJ,cAAP;AACD,GAZyB,CAA1B;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAaAxB,EAAAA,iBAAiB,CAAC,YAAM;AACtB,QAAIyB,MAAM,GAAG,IAAb;;AAEA,QAAI,CAACV,iBAAL,EAAwB;AACtB,aAAOW,SAAP;AACD;;AAED,QAAMC,SAAS,GAAGV,UAAU,CAACJ,KAAD,CAA5B;;AAEA,QAAMe,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACA;AACA;AACA,UAAIH,MAAJ,EAAY;AACVD,QAAAA,QAAQ,CAACG,SAAS,CAACL,OAAX,CAAR;AACD;AACF,KAPD;;AASAM,IAAAA,WAAW;AACXD,IAAAA,SAAS,CAACE,WAAV,CAAsBD,WAAtB;AACA,WAAO,YAAM;AACXH,MAAAA,MAAM,GAAG,KAAT;AACAE,MAAAA,SAAS,CAACG,cAAV,CAAyBF,WAAzB;AACD,KAHD;AAID,GAxBgB,EAwBd,CAACf,KAAD,EAAQI,UAAR,EAAoBF,iBAApB,CAxBc,CAAjB;;AA0BA,MAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAb,IAAAA,KAAK,CAACmC,aAAN,CAAoB;AAClBlB,MAAAA,KAAK,EAALA,KADkB;AAElBU,MAAAA,KAAK,EAALA;AAFkB,KAApB;AAID;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: {},\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, options);\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"]},"metadata":{},"sourceType":"module"}