{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\franc\\\\OneDrive\\\\Documentos\\\\GitHub\\\\material-kit-react-main\\\\src\\\\components\\\\_dashboard\\\\app\\\\AppTasks.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik'; // material\n\nimport { Box, Card, Checkbox, CardHeader, Typography, FormControlLabel, Stack } from '@mui/material'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TASKS = ['Create FireStone Logo', 'Add SCSS and JS files if required', 'Stakeholder Meeting', 'Scoping & Estimations', 'Sprint Showcase']; // ----------------------------------------------------------------------\n\nTaskItem.propTypes = {\n  task: PropTypes.string,\n  checked: PropTypes.bool,\n  formik: PropTypes.object\n};\n\nfunction TaskItem({\n  task,\n  checked,\n  formik,\n  ...other\n}) {\n  const {\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    justifyContent: \"space-between\",\n    sx: {\n      py: 0.75\n    },\n    children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, { ...getFieldProps('checked'),\n        value: task,\n        checked: checked,\n        ...other\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this),\n      label: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: { ...(checked && {\n            color: 'text.disabled',\n            textDecoration: 'line-through'\n          })\n        },\n        children: task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_c = TaskItem;\nexport default function AppTasks() {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      checked: [TASKS[2]]\n    },\n    onSubmit: values => {\n      console.log(values);\n    }\n  });\n  const {\n    values,\n    handleSubmit\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        px: 3,\n        py: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          autoComplete: \"off\",\n          noValidate: true,\n          onSubmit: handleSubmit,\n          children: TASKS.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n            task: task,\n            formik: formik,\n            checked: values.checked.includes(task)\n          }, task, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppTasks, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c2 = AppTasks;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskItem\");\n$RefreshReg$(_c2, \"AppTasks\");","map":{"version":3,"sources":["C:/Users/franc/OneDrive/Documentos/GitHub/material-kit-react-main/src/components/_dashboard/app/AppTasks.js"],"names":["PropTypes","Form","FormikProvider","useFormik","Box","Card","Checkbox","CardHeader","Typography","FormControlLabel","Stack","TASKS","TaskItem","propTypes","task","string","checked","bool","formik","object","other","getFieldProps","py","color","textDecoration","AppTasks","initialValues","onSubmit","values","console","log","handleSubmit","px","map","includes"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport {\n  Box,\n  Card,\n  Checkbox,\n  CardHeader,\n  Typography,\n  FormControlLabel,\n  Stack\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst TASKS = [\n  'Create FireStone Logo',\n  'Add SCSS and JS files if required',\n  'Stakeholder Meeting',\n  'Scoping & Estimations',\n  'Sprint Showcase'\n];\n\n// ----------------------------------------------------------------------\n\nTaskItem.propTypes = {\n  task: PropTypes.string,\n  checked: PropTypes.bool,\n  formik: PropTypes.object\n};\n\nfunction TaskItem({ task, checked, formik, ...other }) {\n  const { getFieldProps } = formik;\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"space-between\" sx={{ py: 0.75 }}>\n      <FormControlLabel\n        control={\n          <Checkbox {...getFieldProps('checked')} value={task} checked={checked} {...other} />\n        }\n        label={\n          <Typography\n            variant=\"body2\"\n            sx={{\n              ...(checked && {\n                color: 'text.disabled',\n                textDecoration: 'line-through'\n              })\n            }}\n          >\n            {task}\n          </Typography>\n        }\n      />\n    </Stack>\n  );\n}\n\nexport default function AppTasks() {\n  const formik = useFormik({\n    initialValues: {\n      checked: [TASKS[2]]\n    },\n    onSubmit: (values) => {\n      console.log(values);\n    }\n  });\n\n  const { values, handleSubmit } = formik;\n\n  return (\n    <Card>\n      <CardHeader title=\"Tasks\" />\n      <Box sx={{ px: 3, py: 1 }}>\n        <FormikProvider value={formik}>\n          <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n            {TASKS.map((task) => (\n              <TaskItem\n                key={task}\n                task={task}\n                formik={formik}\n                checked={values.checked.includes(task)}\n              />\n            ))}\n          </Form>\n        </FormikProvider>\n      </Box>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}