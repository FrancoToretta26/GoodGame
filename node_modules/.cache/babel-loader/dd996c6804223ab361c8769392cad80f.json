{"ast":null,"code":"import Payment from 'payment';\n\nfunction clearNumber(value = '') {\n  return value.replace(/\\D+/g, '');\n}\n\nexport function formatCreditCardNumber(value) {\n  if (!value) {\n    return value;\n  }\n\n  const issuer = Payment.fns.cardType(value);\n  const clearValue = clearNumber(value);\n  let nextValue;\n\n  switch (issuer) {\n    case 'amex':\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 15)}`;\n      break;\n\n    case 'dinersclub':\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 14)}`;\n      break;\n\n    default:\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 8)} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`;\n      break;\n  }\n\n  return nextValue.trim();\n}\nexport function formatCVC(value, prevValue, allValues = {}) {\n  const clearValue = clearNumber(value);\n  let maxLength = 4;\n\n  if (allValues.number) {\n    const issuer = Payment.fns.cardType(allValues.number);\n    maxLength = issuer === 'amex' ? 4 : 3;\n  }\n\n  return clearValue.slice(0, maxLength);\n}\nexport function formatExpirationDate(value) {\n  const clearValue = clearNumber(value);\n\n  if (clearValue.length >= 3) {\n    return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n  }\n\n  return clearValue;\n}","map":{"version":3,"sources":["C:/Users/feder/dashboard-Grupo7SEM/src/components/payment/cardUtils.js"],"names":["Payment","clearNumber","value","replace","formatCreditCardNumber","issuer","fns","cardType","clearValue","nextValue","slice","trim","formatCVC","prevValue","allValues","maxLength","number","formatExpirationDate","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;;AAEA,SAASC,WAAT,CAAqBC,KAAK,GAAG,EAA7B,EAAiC;AAC/B,SAAOA,KAAK,CAACC,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAP;AACD;;AAED,OAAO,SAASC,sBAAT,CAAgCF,KAAhC,EAAuC;AAC5C,MAAI,CAACA,KAAL,EAAY;AACV,WAAOA,KAAP;AACD;;AAED,QAAMG,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAqBL,KAArB,CAAf;AACA,QAAMM,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;AACA,MAAIO,SAAJ;;AAEA,UAAQJ,MAAR;AACE,SAAK,MAAL;AACEI,MAAAA,SAAS,GAAI,GAAED,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CACvC,CADuC,EAEvC,EAFuC,CAGvC,IAAGF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAAyB,EAH9B;AAIA;;AACF,SAAK,YAAL;AACED,MAAAA,SAAS,GAAI,GAAED,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CACvC,CADuC,EAEvC,EAFuC,CAGvC,IAAGF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAAyB,EAH9B;AAIA;;AACF;AACED,MAAAA,SAAS,GAAI,GAAED,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CACvC,CADuC,EAEvC,CAFuC,CAGvC,IAAGF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAAwB,IAAGF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAAyB,EAHzD;AAIA;AAlBJ;;AAqBA,SAAOD,SAAS,CAACE,IAAV,EAAP;AACD;AAED,OAAO,SAASC,SAAT,CAAmBV,KAAnB,EAA0BW,SAA1B,EAAqCC,SAAS,GAAG,EAAjD,EAAqD;AAC1D,QAAMN,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;AACA,MAAIa,SAAS,GAAG,CAAhB;;AAEA,MAAID,SAAS,CAACE,MAAd,EAAsB;AACpB,UAAMX,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAqBO,SAAS,CAACE,MAA/B,CAAf;AACAD,IAAAA,SAAS,GAAGV,MAAM,KAAK,MAAX,GAAoB,CAApB,GAAwB,CAApC;AACD;;AAED,SAAOG,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBK,SAApB,CAAP;AACD;AAED,OAAO,SAASE,oBAAT,CAA8Bf,KAA9B,EAAqC;AAC1C,QAAMM,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;;AAEA,MAAIM,UAAU,CAACU,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,WAAQ,GAAEV,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,EAA3D;AACD;;AAED,SAAOF,UAAP;AACD","sourcesContent":["import Payment from 'payment'\r\n\r\nfunction clearNumber(value = '') {\r\n  return value.replace(/\\D+/g, '')\r\n}\r\n\r\nexport function formatCreditCardNumber(value) {\r\n  if (!value) {\r\n    return value\r\n  }\r\n\r\n  const issuer = Payment.fns.cardType(value)\r\n  const clearValue = clearNumber(value)\r\n  let nextValue\r\n\r\n  switch (issuer) {\r\n    case 'amex':\r\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\r\n        4,\r\n        10\r\n      )} ${clearValue.slice(10, 15)}`\r\n      break\r\n    case 'dinersclub':\r\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\r\n        4,\r\n        10\r\n      )} ${clearValue.slice(10, 14)}`\r\n      break\r\n    default:\r\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\r\n        4,\r\n        8\r\n      )} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`\r\n      break\r\n  }\r\n\r\n  return nextValue.trim()\r\n}\r\n\r\nexport function formatCVC(value, prevValue, allValues = {}) {\r\n  const clearValue = clearNumber(value)\r\n  let maxLength = 4\r\n\r\n  if (allValues.number) {\r\n    const issuer = Payment.fns.cardType(allValues.number)\r\n    maxLength = issuer === 'amex' ? 4 : 3\r\n  }\r\n\r\n  return clearValue.slice(0, maxLength)\r\n}\r\n\r\nexport function formatExpirationDate(value) {\r\n  const clearValue = clearNumber(value)\r\n\r\n  if (clearValue.length >= 3) {\r\n    return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`\r\n  }\r\n\r\n  return clearValue\r\n}\r\n"]},"metadata":{},"sourceType":"module"}