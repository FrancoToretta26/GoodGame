{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { ResponsiveTooltipWrapper } from '../internal/pickers/wrappers/ResponsiveWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from './DateRangePickerView';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/api/date-range-picker/)\n */\n\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up('sm')\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DateRangePicker;","map":{"version":3,"sources":["C:/Users/franc/OneDrive/Documentos/GitHub/material-kit-react-main/node_modules/@mui/lab/DateRangePicker/DateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","PropTypes","React","useThemeProps","ResponsiveTooltipWrapper","useDefaultDates","useUtils","useDateRangeValidation","usePickerState","DateRangePickerView","DateRangePickerInput","parseRangeInputValue","jsx","_jsx","KeyboardDateInputComponent","PureDateInputComponent","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","DateRangePicker","forwardRef","inProps","ref","props","name","calendars","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","other","defaultDates","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","formats","keyboardDate","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","autoFocus","oneOf","cancelText","node","className","string","clearable","clearText","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","desktopModeMediaQuery","DialogProps","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","okText","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","orientation","PopperProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showTodayButton","showToolbar","todayText","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","TransitionComponent","arrayOf","Date"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,OAAd,EAAuB,UAAvB,EAAmC,MAAnC,EAA2C,WAA3C,EAAwD,SAAxD,EAAmE,aAAnE,EAAkF,SAAlF,EAA6F,SAA7F,CAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,wBAAT,QAAyC,gDAAzC;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,oCAA1C;AACA,SAASC,sBAAT,QAAuC,yCAAvC;AACA,SAASC,cAAT,QAA+B,0CAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,0BAA0B,GAAGJ,oBAAnC;AACA,MAAMK,sBAAsB,GAAGL,oBAA/B;AACA,MAAMM,uBAAuB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,IAAP,CADkB;AAE9BC,EAAAA,UAAU,EAAEP,oBAFkB;AAG9BQ,EAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,KAAiBF,KAAK,CAACG,OAAN,CAAcF,CAAC,CAAC,CAAD,CAAf,EAAoBC,CAAC,CAAC,CAAD,CAArB,KAA6BF,KAAK,CAACG,OAAN,CAAcF,CAAC,CAAC,CAAD,CAAf,EAAoBC,CAAC,CAAC,CAAD,CAArB;AAHhC,CAAhC;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,eAAe,GAAG,aAAatB,KAAK,CAACuB,UAAN,CAAiB,SAASD,eAAT,CAAyBE,OAAzB,EAAkCC,GAAlC,EAAuC;AAC3F,QAAMC,KAAK,GAAGzB,aAAa,CAAC;AAC1ByB,IAAAA,KAAK,EAAEF,OADmB;AAE1BG,IAAAA,IAAI,EAAE;AAFoB,GAAD,CAA3B;;AAKA,QAAM;AACJC,IAAAA,SAAS,GAAG,CADR;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,IAAI,GAAG,YAJH;AAKJC,IAAAA,SAAS,GAAG,OALR;AAMJC,IAAAA,OAAO,GAAG,KANN;AAOJC,IAAAA,WAAW,EAAEC,iBAPT;AAQJC,IAAAA,OAAO,EAAEC,WARL;AASJC,IAAAA,OAAO,EAAEC;AATL,MAUFb,KAVJ;AAAA,QAWMc,KAAK,GAAG3C,6BAA6B,CAAC6B,KAAD,EAAQ5B,SAAR,CAX3C;;AAaA,QAAMoB,KAAK,GAAGd,QAAQ,EAAtB;AACA,QAAMqC,YAAY,GAAGtC,eAAe,EAApC;AACA,QAAMiC,OAAO,GAAGC,WAAW,IAAI,IAAf,GAAsBA,WAAtB,GAAoCI,YAAY,CAACL,OAAjE;AACA,QAAME,OAAO,GAAGC,WAAW,IAAI,IAAf,GAAsBA,WAAtB,GAAoCE,YAAY,CAACH,OAAjE;AACA,QAAM,CAACI,0BAAD,EAA6BC,6BAA7B,IAA8D3C,KAAK,CAAC4C,QAAN,CAAe,OAAf,CAApE;;AAEA,QAAMC,gBAAgB,GAAGjD,QAAQ,CAAC,EAAD,EAAK4C,KAAL,EAAY;AAC3CX,IAAAA,KAD2C;AAE3CC,IAAAA;AAF2C,GAAZ,CAAjC;;AAKA,QAAMgB,SAAS,GAAGlD,QAAQ,CAAC,EAAD,EAAK4C,KAAL,EAAY;AACpCJ,IAAAA,OADoC;AAEpCE,IAAAA;AAFoC,GAAZ,CAA1B;;AAKA,QAAM;AACJS,IAAAA,WADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA;AAHI,MAIF3C,cAAc,CAACuC,gBAAD,EAAmB/B,uBAAnB,CAJlB;AAKA,QAAMoC,eAAe,GAAG7C,sBAAsB,CAACqB,KAAD,CAA9C;;AAEA,QAAMyB,cAAc,GAAGvD,QAAQ,CAAC,EAAD,EAAKoD,UAAL,EAAiBF,SAAjB,EAA4B;AACzDJ,IAAAA,0BADyD;AAEzDR,IAAAA,WAAW,EAAEC,iBAAiB,IAAIjB,KAAK,CAACkC,OAAN,CAAcC,YAFS;AAGzDV,IAAAA,6BAHyD;AAIzDX,IAAAA,SAJyD;AAKzDC,IAAAA,OALyD;AAMzDF,IAAAA,IANyD;AAOzDmB,IAAAA,eAPyD;AAQzDzB,IAAAA;AARyD,GAA5B,CAA/B;;AAWA,SAAO,aAAad,IAAI,CAACT,wBAAD,EAA2BN,QAAQ,CAAC,EAAD,EAAKkD,SAAL,EAAgBG,YAAhB,EAA8B;AACvFE,IAAAA,cAAc,EAAEA,cADuE;AAEvFvC,IAAAA,0BAA0B,EAAEA,0BAF2D;AAGvFC,IAAAA,sBAAsB,EAAEA,sBAH+D;AAIvFyC,IAAAA,QAAQ,EAAE,aAAa3C,IAAI,CAACJ,mBAAD,EAAsBX,QAAQ,CAAC;AACxD2D,MAAAA,IAAI,EAAEN,YAAY,CAACM,IADqC;AAExDJ,MAAAA,cAAc,EAAEA,cAFwC;AAGxDvB,MAAAA,SAAS,EAAEA,SAH6C;AAIxDc,MAAAA,0BAA0B,EAAEA,0BAJ4B;AAKxDC,MAAAA,6BAA6B,EAAEA,6BALyB;AAMxDX,MAAAA,SAAS,EAAEA,SAN6C;AAOxDC,MAAAA,OAAO,EAAEA;AAP+C,KAAD,EAQtDc,WARsD,EAQzCD,SARyC,CAA9B;AAJ4D,GAA9B,CAAnC,CAAxB;AAcD,CAnEoC,CAArC;AAoEAU,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCpC,eAAe,CAACqC;AACxD;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE7D,SAAS,CAAC8D,UAAV,CAAqBC,MAArB,CAVb;;AAYA;AACF;AACA;AACA;AACEC,EAAAA,sBAAsB,EAAEhE,SAAS,CAACiE,IAhBlC;;AAkBA;AACF;AACA;AACEC,EAAAA,SAAS,EAAElE,SAAS,CAACiE,IArBrB;;AAuBA;AACF;AACA;AACA;AACEpC,EAAAA,SAAS,EAAE7B,SAAS,CAACmE,KAAV,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB,CA3BX;;AA6BA;AACF;AACA;AACA;AACEC,EAAAA,UAAU,EAAEpE,SAAS,CAACqE,IAjCtB;;AAmCA;AACF;AACA;AACEd,EAAAA,QAAQ,EAAEvD,SAAS,CAACqE,IAtCpB;;AAwCA;AACF;AACA;AACEC,EAAAA,SAAS,EAAEtE,SAAS,CAACuE,MA3CrB;;AA6CA;AACF;AACA;AACA;AACEC,EAAAA,SAAS,EAAExE,SAAS,CAACiE,IAjDrB;;AAmDA;AACF;AACA;AACA;AACEQ,EAAAA,SAAS,EAAEzE,SAAS,CAACqE,IAvDrB;;AAyDA;AACF;AACA;AACA;AACA;AACEK,EAAAA,UAAU,EAAE1E,SAAS,CAAC2E,KAAV,CAAgB;AAC1BC,IAAAA,eAAe,EAAE5E,SAAS,CAAC6E,WADD;AAE1BC,IAAAA,aAAa,EAAE9E,SAAS,CAAC6E,WAFC;AAG1BE,IAAAA,cAAc,EAAE/E,SAAS,CAAC6E,WAHA;AAI1BG,IAAAA,gBAAgB,EAAEhF,SAAS,CAAC6E,WAJF;AAK1BI,IAAAA,cAAc,EAAEjF,SAAS,CAAC6E,WALA;AAM1BK,IAAAA,gBAAgB,EAAElF,SAAS,CAAC6E,WANF;AAO1BM,IAAAA,cAAc,EAAEnF,SAAS,CAAC6E;AAPA,GAAhB,CA9DZ;;AAwEA;AACF;AACA;AACA;AACEO,EAAAA,eAAe,EAAEpF,SAAS,CAACqF,MA5E3B;;AA8EA;AACF;AACA;AACEC,EAAAA,oBAAoB,EAAEtF,SAAS,CAACuF,GAjFhC;;AAmFA;AACF;AACA;AACA;AACA;AACEC,EAAAA,qBAAqB,EAAExF,SAAS,CAACuE,MAxFjC;;AA0FA;AACF;AACA;AACEkB,EAAAA,WAAW,EAAEzF,SAAS,CAACqF,MA7FvB;;AA+FA;AACF;AACA;AACA;AACEK,EAAAA,yBAAyB,EAAE1F,SAAS,CAACiE,IAnGrC;;AAqGA;AACF;AACA;AACA;AACE0B,EAAAA,oBAAoB,EAAE3F,SAAS,CAACiE,IAzGhC;;AA2GA;AACF;AACA;AACE2B,EAAAA,QAAQ,EAAE5F,SAAS,CAACiE,IA9GpB;;AAgHA;AACF;AACA;AACE4B,EAAAA,aAAa,EAAE7F,SAAS,CAACiE,IAnHzB;;AAqHA;AACF;AACA;AACA;AACE6B,EAAAA,qBAAqB,EAAE9F,SAAS,CAACiE,IAzHjC;;AA2HA;AACF;AACA;AACA;AACE8B,EAAAA,kBAAkB,EAAE/F,SAAS,CAACiE,IA/H9B;;AAiIA;AACF;AACA;AACA;AACE+B,EAAAA,iBAAiB,EAAEhG,SAAS,CAACiE,IArI7B;;AAuIA;AACF;AACA;AACEgC,EAAAA,WAAW,EAAEjG,SAAS,CAACiE,IA1IvB;;AA4IA;AACF;AACA;AACA;AACE/B,EAAAA,OAAO,EAAElC,SAAS,CAACqE,IAhJnB;;AAkJA;AACF;AACA;AACA;AACE6B,EAAAA,qBAAqB,EAAElG,SAAS,CAACmG,IAtJjC;;AAwJA;AACF;AACA;AACEC,EAAAA,0BAA0B,EAAEpG,SAAS,CAACmG,IA3JtC;;AA6JA;AACF;AACA;AACEE,EAAAA,mBAAmB,EAAErG,SAAS,CAACiE,IAhK/B;;AAkKA;AACF;AACA;AACEqC,EAAAA,mBAAmB,EAAEtG,SAAS,CAACqF,MArK/B;;AAuKA;AACF;AACA;AACElD,EAAAA,WAAW,EAAEnC,SAAS,CAACuE,MA1KvB;;AA4KA;AACF;AACA;AACEgC,EAAAA,UAAU,EAAEvG,SAAS,CAACqF,MA/KtB;;AAiLA;AACF;AACA;AACEmB,EAAAA,QAAQ,EAAExG,SAAS,CAACyG,SAAV,CAAoB,CAACzG,SAAS,CAACmG,IAAX,EAAiBnG,SAAS,CAAC2E,KAAV,CAAgB;AAC7D+B,IAAAA,OAAO,EAAE1G,SAAS,CAACqF;AAD0C,GAAhB,CAAjB,CAApB,CApLV;;AAwLA;AACF;AACA;AACEsB,EAAAA,GAAG,EAAE3G,SAAS,CAACyG,SAAV,CAAoB,CAACzG,SAAS,CAAC4G,MAAX,EAAmB5G,SAAS,CAACuE,MAA7B,CAApB,CA3LL;;AA6LA;AACF;AACA;AACEsC,EAAAA,KAAK,EAAE7G,SAAS,CAACqE,IAhMjB;;AAkMA;AACF;AACA;AACEyC,EAAAA,mBAAmB,EAAE9G,SAAS,CAACuE,MArM/B;;AAuMA;AACF;AACA;AACA;AACA;AACEwC,EAAAA,OAAO,EAAE/G,SAAS,CAACiE,IA5MnB;;AA8MA;AACF;AACA;AACA;AACEjC,EAAAA,IAAI,EAAEhC,SAAS,CAACuE,MAlNhB;;AAoNA;AACF;AACA;AACA;AACEhC,EAAAA,OAAO,EAAEvC,SAAS,CAACuF,GAxNnB;;AA0NA;AACF;AACA;AACA;AACElD,EAAAA,OAAO,EAAErC,SAAS,CAACuF,GA9NnB;;AAgOA;AACF;AACA;AACA;AACEyB,EAAAA,MAAM,EAAEhH,SAAS,CAACqE,IApOlB;;AAsOA;AACF;AACA;AACE4C,EAAAA,QAAQ,EAAEjH,SAAS,CAACmG,IAzOpB;;AA2OA;AACF;AACA;AACEpE,EAAAA,QAAQ,EAAE/B,SAAS,CAACmG,IAAV,CAAee,UA9OzB;;AAgPA;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAEnH,SAAS,CAACmG,IApPnB;;AAsPA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEiB,EAAAA,OAAO,EAAEpH,SAAS,CAACmG,IA9PnB;;AAgQA;AACF;AACA;AACEkB,EAAAA,aAAa,EAAErH,SAAS,CAACmG,IAnQzB;;AAqQA;AACF;AACA;AACA;AACEmB,EAAAA,MAAM,EAAEtH,SAAS,CAACmG,IAzQlB;;AA2QA;AACF;AACA;AACEoB,EAAAA,YAAY,EAAEvH,SAAS,CAACmG,IA9QxB;;AAgRA;AACF;AACA;AACE3C,EAAAA,IAAI,EAAExD,SAAS,CAACiE,IAnRhB;;AAqRA;AACF;AACA;AACEuD,EAAAA,qBAAqB,EAAExH,SAAS,CAACqF,MAxRjC;;AA0RA;AACF;AACA;AACEoC,EAAAA,WAAW,EAAEzH,SAAS,CAACmE,KAAV,CAAgB,CAAC,WAAD,EAAc,UAAd,CAAhB,CA7Rb;;AA+RA;AACF;AACA;AACEuD,EAAAA,WAAW,EAAE1H,SAAS,CAACqF,MAlSvB;;AAoSA;AACF;AACA;AACEsC,EAAAA,QAAQ,EAAE3H,SAAS,CAACiE,IAvSpB;;AAySA;AACF;AACA;AACA;AACE2D,EAAAA,gBAAgB,EAAE5H,SAAS,CAACiE,IA7S5B;;AA+SA;AACF;AACA;AACA;AACE4D,EAAAA,SAAS,EAAE7H,SAAS,CAACmG,IAnTrB;;AAqTA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE2B,EAAAA,WAAW,EAAE9H,SAAS,CAACmG,IAAV,CAAee,UAvU5B;;AAyUA;AACF;AACA;AACA;AACEa,EAAAA,aAAa,EAAE/H,SAAS,CAACmG,IA7UzB;;AA+UA;AACF;AACA;AACE6B,EAAAA,aAAa,EAAEhI,SAAS,CAACmG,IAlVzB;;AAoVA;AACF;AACA;AACE8B,EAAAA,oBAAoB,EAAEjI,SAAS,CAACuE,MAvVhC;;AAyVA;AACF;AACA;AACE2D,EAAAA,iBAAiB,EAAElI,SAAS,CAACmG,IA5V7B;;AA8VA;AACF;AACA;AACA;AACEgC,EAAAA,iBAAiB,EAAEnI,SAAS,CAACmG,IAlW7B;;AAoWA;AACF;AACA;AACA;AACEiC,EAAAA,2BAA2B,EAAEpI,SAAS,CAACiE,IAxWvC;;AA0WA;AACF;AACA;AACA;AACEoE,EAAAA,eAAe,EAAErI,SAAS,CAACiE,IA9W3B;;AAgXA;AACF;AACA;AACEqE,EAAAA,WAAW,EAAEtI,SAAS,CAACiE,IAnXvB;;AAqXA;AACF;AACA;AACA;AACEhC,EAAAA,SAAS,EAAEjC,SAAS,CAACqE,IAzXrB;;AA2XA;AACF;AACA;AACA;AACEkE,EAAAA,SAAS,EAAEvI,SAAS,CAACqE,IA/XrB;;AAiYA;AACF;AACA;AACEmE,EAAAA,gBAAgB,EAAExI,SAAS,CAAC6E,WApY5B;;AAsYA;AACF;AACA;AACE4D,EAAAA,aAAa,EAAEzI,SAAS,CAACuE,MAzYzB;;AA2YA;AACF;AACA;AACA;AACEmE,EAAAA,kBAAkB,EAAE1I,SAAS,CAACqE,IA/Y9B;;AAiZA;AACF;AACA;AACA;AACEsE,EAAAA,YAAY,EAAE3I,SAAS,CAACqE,IArZxB;;AAuZA;AACF;AACA;AACEuE,EAAAA,mBAAmB,EAAE5I,SAAS,CAAC6E,WA1Z/B;;AA4ZA;AACF;AACA;AACE/C,EAAAA,KAAK,EAAE9B,SAAS,CAAC6I,OAAV,CAAkB7I,SAAS,CAACyG,SAAV,CAAoB,CAACzG,SAAS,CAACuF,GAAX,EAAgBvF,SAAS,CAAC8D,UAAV,CAAqBgF,IAArB,CAAhB,EAA4C9I,SAAS,CAAC4G,MAAtD,EAA8D5G,SAAS,CAACuE,MAAxE,CAApB,CAAlB,EAAwH2C;AA/Z/H,CAFF,GAkaI,KAAK,CAlaT;AAmaA,eAAe3F,eAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { ResponsiveTooltipWrapper } from '../internal/pickers/wrappers/ResponsiveWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from './DateRangePickerView';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/api/date-range-picker/)\n */\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up('sm')\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DateRangePicker;"]},"metadata":{},"sourceType":"module"}