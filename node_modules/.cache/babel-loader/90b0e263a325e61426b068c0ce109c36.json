{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\", \"PopperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport DesktopTooltipWrapper from '../internal/pickers/wrappers/DesktopTooltipWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DesktopDateRangePicker API](https://mui.com/api/desktop-date-range-picker/)\r\n */\n\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDesktopDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp,\n    PopperProps,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(DesktopTooltipWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Regular expression to detect \"accepted\" symbols.\r\n   * @default /\\dap/gi\r\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\r\n   * If `true`, `onChange` is fired on click even if the same date is selected.\r\n   * @default false\r\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\r\n   * The number of calendars that render on **desktop**.\r\n   * @default 2\r\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * className applied to the root component.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The components used for each slot.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.object,\n\n  /**\r\n   * Default calendar month displayed when `value={null}`.\r\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\r\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\r\n   * @default false\r\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\r\n   * If `true` the popup or dialog will immediately close after submitting full date.\r\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * @default false\r\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\r\n   * If `true`, todays date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\r\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\r\n   * @default false\r\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\r\n   * Do not render open picker button (renders only text field with validation).\r\n   * @default false\r\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\r\n   * @default false\r\n   */\n  disablePast: PropTypes.bool,\n\n  /**\r\n   * Text for end input label and toolbar placeholder.\r\n   * @default 'End'\r\n   */\n  endText: PropTypes.node,\n\n  /**\r\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\r\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\r\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\r\n   * Get aria-label text for switching between views button.\r\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\r\n   * Props to pass to keyboard input adornment.\r\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\r\n   * Format string.\r\n   */\n  inputFormat: PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  InputProps: PropTypes.object,\n\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\r\n   * @ignore\r\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\r\n   * @ignore\r\n   */\n  label: PropTypes.node,\n\n  /**\r\n   * Left arrow icon aria-label text.\r\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\r\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\r\n   * Can be used to preload information and show it in calendar.\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\r\n   * @default '__/__/____'\r\n   */\n  mask: PropTypes.string,\n\n  /**\r\n   * Max selectable date. @DateIOType\r\n   * @default defaultMaxDate\r\n   */\n  maxDate: PropTypes.any,\n\n  /**\r\n   * Min selectable date. @DateIOType\r\n   * @default defaultMinDate\r\n   */\n  minDate: PropTypes.any,\n\n  /**\r\n   * Callback fired when date is accepted @DateIOType.\r\n   */\n  onAccept: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value (the selected date range) changes @DateIOType.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\r\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\r\n   * This can be used to render appropriate form error.\r\n   *\r\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\r\n   * @DateIOType\r\n   */\n  onError: PropTypes.func,\n\n  /**\r\n   * Callback firing on month change. @DateIOType\r\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * Callback fired on view change.\r\n   */\n  onViewChange: PropTypes.func,\n\n  /**\r\n   * Control the popup or dialog open state.\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * Props to pass to keyboard adornment button.\r\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\r\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\r\n   */\n  PopperProps: PropTypes.object,\n\n  /**\r\n   * Make picker read only.\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Disable heavy animations.\r\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\r\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\r\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\r\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\r\n   */\n  renderDay: PropTypes.func,\n\n  /**\r\n   * The `renderInput` prop allows you to customize the rendered input.\r\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\r\n   * that you need to forward to the range start/end inputs respectively.\r\n   * Pay specific attention to the `ref` and `inputProps` keys.\r\n   * @example\r\n   * ```jsx\r\n   * <DateRangePicker\r\n   *  renderInput={(startProps, endProps) => (\r\n   *   <React.Fragment>\r\n   *     <TextField {...startProps} />\r\n   *     <Box sx={{ mx: 2 }}> to </Box>\r\n   *     <TextField {...endProps} />\r\n   *   </React.Fragment>;\r\n   *  )}\r\n   * />\r\n   * ````\r\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\r\n   * Component displaying when passed `loading` true.\r\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\r\n   */\n  renderLoading: PropTypes.func,\n\n  /**\r\n   * Custom formatter to be passed into Rifm component.\r\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\r\n   * Right arrow icon aria-label text.\r\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\r\n   * Disable specific date. @DateIOType\r\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\r\n   * Disable specific years dynamically.\r\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\r\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\r\n   * If `true`, show the toolbar even in desktop mode.\r\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\r\n   * Text for start input label and toolbar placeholder.\r\n   * @default 'Start'\r\n   */\n  startText: PropTypes.node,\n\n  /**\r\n   * Component that will replace default toolbar renderer.\r\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\r\n   * Date format, that is displaying in toolbar.\r\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\r\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\r\n   * @default '–'\r\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\r\n   * Mobile picker title, displaying in the toolbar.\r\n   * @default 'Select date range'\r\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\r\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\r\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\r\n   * The value of the date range picker.\r\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DesktopDateRangePicker;","map":{"version":3,"sources":["C:/Users/feder/dashboard-Grupo7SEM/node_modules/@mui/lab/DesktopDateRangePicker/DesktopDateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useThemeProps","DesktopTooltipWrapper","useDefaultDates","useUtils","useDateRangeValidation","usePickerState","DateRangePickerView","DateRangePickerInput","parseRangeInputValue","jsx","_jsx","KeyboardDateInputComponent","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","DesktopDateRangePicker","forwardRef","inProps","ref","props","name","calendars","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","PopperProps","TransitionComponent","other","defaultDates","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","formats","keyboardDate","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","autoFocus","oneOf","node","className","string","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","arrayOf","Date"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\", \"PopperProps\", \"TransitionComponent\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useThemeProps } from '@mui/material/styles';\r\nimport DesktopTooltipWrapper from '../internal/pickers/wrappers/DesktopTooltipWrapper';\r\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\r\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\r\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\r\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\r\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\r\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst KeyboardDateInputComponent = DateRangePickerInput;\r\nconst rangePickerValueManager = {\r\n  emptyValue: [null, null],\r\n  parseInput: parseRangeInputValue,\r\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\r\n};\r\n\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DesktopDateRangePicker API](https://mui.com/api/desktop-date-range-picker/)\r\n */\r\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\r\n  const props = useThemeProps({\r\n    props: inProps,\r\n    name: 'MuiDesktopDateRangePicker'\r\n  });\r\n\r\n  const {\r\n    calendars = 2,\r\n    value,\r\n    onChange,\r\n    mask = '__/__/____',\r\n    startText = 'Start',\r\n    endText = 'End',\r\n    inputFormat: passedInputFormat,\r\n    minDate: minDateProp,\r\n    maxDate: maxDateProp,\r\n    PopperProps,\r\n    TransitionComponent\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, _excluded);\r\n\r\n  const utils = useUtils();\r\n  const defaultDates = useDefaultDates();\r\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\r\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\r\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\r\n\r\n  const pickerStateProps = _extends({}, other, {\r\n    value,\r\n    onChange\r\n  });\r\n\r\n  const restProps = _extends({}, other, {\r\n    minDate,\r\n    maxDate\r\n  });\r\n\r\n  const {\r\n    pickerProps,\r\n    inputProps,\r\n    wrapperProps\r\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\r\n  const validationError = useDateRangeValidation(props);\r\n\r\n  const DateInputProps = _extends({}, inputProps, restProps, {\r\n    currentlySelectingRangeEnd,\r\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\r\n    setCurrentlySelectingRangeEnd,\r\n    startText,\r\n    endText,\r\n    mask,\r\n    validationError,\r\n    ref\r\n  });\r\n\r\n  return /*#__PURE__*/_jsx(DesktopTooltipWrapper, _extends({}, wrapperProps, {\r\n    DateInputProps: DateInputProps,\r\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\r\n    PopperProps: PopperProps,\r\n    TransitionComponent: TransitionComponent,\r\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\r\n      open: wrapperProps.open,\r\n      DateInputProps: DateInputProps,\r\n      calendars: calendars,\r\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\r\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\r\n      startText: startText,\r\n      endText: endText\r\n    }, pickerProps, restProps))\r\n  }));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateRangePicker.propTypes\r\n/* remove-proptypes */\r\n= {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * Regular expression to detect \"accepted\" symbols.\r\n   * @default /\\dap/gi\r\n   */\r\n  acceptRegex: PropTypes.instanceOf(RegExp),\r\n\r\n  /**\r\n   * If `true`, `onChange` is fired on click even if the same date is selected.\r\n   * @default false\r\n   */\r\n  allowSameDateSelection: PropTypes.bool,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  autoFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * The number of calendars that render on **desktop**.\r\n   * @default 2\r\n   */\r\n  calendars: PropTypes.oneOf([1, 2, 3]),\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * className applied to the root component.\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * The components used for each slot.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  components: PropTypes.shape({\r\n    LeftArrowButton: PropTypes.elementType,\r\n    LeftArrowIcon: PropTypes.elementType,\r\n    OpenPickerIcon: PropTypes.elementType,\r\n    RightArrowButton: PropTypes.elementType,\r\n    RightArrowIcon: PropTypes.elementType,\r\n    SwitchViewButton: PropTypes.elementType,\r\n    SwitchViewIcon: PropTypes.elementType\r\n  }),\r\n\r\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\r\n  componentsProps: PropTypes.object,\r\n\r\n  /**\r\n   * Default calendar month displayed when `value={null}`.\r\n   */\r\n  defaultCalendarMonth: PropTypes.any,\r\n\r\n  /**\r\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\r\n   * @default false\r\n   */\r\n  disableAutoMonthSwitching: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true` the popup or dialog will immediately close after submitting full date.\r\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\r\n  disableCloseOnSelect: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * @default false\r\n   */\r\n  disableFuture: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, todays date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\r\n  disableHighlightToday: PropTypes.bool,\r\n\r\n  /**\r\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\r\n   * @default false\r\n   */\r\n  disableMaskedInput: PropTypes.bool,\r\n\r\n  /**\r\n   * Do not render open picker button (renders only text field with validation).\r\n   * @default false\r\n   */\r\n  disableOpenPicker: PropTypes.bool,\r\n\r\n  /**\r\n   * @default false\r\n   */\r\n  disablePast: PropTypes.bool,\r\n\r\n  /**\r\n   * Text for end input label and toolbar placeholder.\r\n   * @default 'End'\r\n   */\r\n  endText: PropTypes.node,\r\n\r\n  /**\r\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\r\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\r\n   */\r\n  getOpenDialogAriaText: PropTypes.func,\r\n\r\n  /**\r\n   * Get aria-label text for switching between views button.\r\n   */\r\n  getViewSwitchingButtonText: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  ignoreInvalidInputs: PropTypes.bool,\r\n\r\n  /**\r\n   * Props to pass to keyboard input adornment.\r\n   */\r\n  InputAdornmentProps: PropTypes.object,\r\n\r\n  /**\r\n   * Format string.\r\n   */\r\n  inputFormat: PropTypes.string,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  InputProps: PropTypes.object,\r\n\r\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\r\n    current: PropTypes.object\r\n  })]),\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  label: PropTypes.node,\r\n\r\n  /**\r\n   * Left arrow icon aria-label text.\r\n   */\r\n  leftArrowButtonText: PropTypes.string,\r\n\r\n  /**\r\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\r\n   * Can be used to preload information and show it in calendar.\r\n   * @default false\r\n   */\r\n  loading: PropTypes.bool,\r\n\r\n  /**\r\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\r\n   * @default '__/__/____'\r\n   */\r\n  mask: PropTypes.string,\r\n\r\n  /**\r\n   * Max selectable date. @DateIOType\r\n   * @default defaultMaxDate\r\n   */\r\n  maxDate: PropTypes.any,\r\n\r\n  /**\r\n   * Min selectable date. @DateIOType\r\n   * @default defaultMinDate\r\n   */\r\n  minDate: PropTypes.any,\r\n\r\n  /**\r\n   * Callback fired when date is accepted @DateIOType.\r\n   */\r\n  onAccept: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value (the selected date range) changes @DateIOType.\r\n   */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   */\r\n  onClose: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\r\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\r\n   * This can be used to render appropriate form error.\r\n   *\r\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\r\n   * @DateIOType\r\n   */\r\n  onError: PropTypes.func,\r\n\r\n  /**\r\n   * Callback firing on month change. @DateIOType\r\n   */\r\n  onMonthChange: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   */\r\n  onOpen: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired on view change.\r\n   */\r\n  onViewChange: PropTypes.func,\r\n\r\n  /**\r\n   * Control the popup or dialog open state.\r\n   */\r\n  open: PropTypes.bool,\r\n\r\n  /**\r\n   * Props to pass to keyboard adornment button.\r\n   */\r\n  OpenPickerButtonProps: PropTypes.object,\r\n\r\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\r\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\r\n\r\n  /**\r\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\r\n   */\r\n  PopperProps: PropTypes.object,\r\n\r\n  /**\r\n   * Make picker read only.\r\n   */\r\n  readOnly: PropTypes.bool,\r\n\r\n  /**\r\n   * Disable heavy animations.\r\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\r\n   */\r\n  reduceAnimations: PropTypes.bool,\r\n\r\n  /**\r\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\r\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\r\n   */\r\n  renderDay: PropTypes.func,\r\n\r\n  /**\r\n   * The `renderInput` prop allows you to customize the rendered input.\r\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api),\r\n   * that you need to forward to the range start/end inputs respectively.\r\n   * Pay specific attention to the `ref` and `inputProps` keys.\r\n   * @example\r\n   * ```jsx\r\n   * <DateRangePicker\r\n   *  renderInput={(startProps, endProps) => (\r\n   *   <React.Fragment>\r\n   *     <TextField {...startProps} />\r\n   *     <Box sx={{ mx: 2 }}> to </Box>\r\n   *     <TextField {...endProps} />\r\n   *   </React.Fragment>;\r\n   *  )}\r\n   * />\r\n   * ````\r\n   */\r\n  renderInput: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * Component displaying when passed `loading` true.\r\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\r\n   */\r\n  renderLoading: PropTypes.func,\r\n\r\n  /**\r\n   * Custom formatter to be passed into Rifm component.\r\n   */\r\n  rifmFormatter: PropTypes.func,\r\n\r\n  /**\r\n   * Right arrow icon aria-label text.\r\n   */\r\n  rightArrowButtonText: PropTypes.string,\r\n\r\n  /**\r\n   * Disable specific date. @DateIOType\r\n   */\r\n  shouldDisableDate: PropTypes.func,\r\n\r\n  /**\r\n   * Disable specific years dynamically.\r\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\r\n   */\r\n  shouldDisableYear: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\r\n  showDaysOutsideCurrentMonth: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, show the toolbar even in desktop mode.\r\n   */\r\n  showToolbar: PropTypes.bool,\r\n\r\n  /**\r\n   * Text for start input label and toolbar placeholder.\r\n   * @default 'Start'\r\n   */\r\n  startText: PropTypes.node,\r\n\r\n  /**\r\n   * Component that will replace default toolbar renderer.\r\n   */\r\n  ToolbarComponent: PropTypes.elementType,\r\n\r\n  /**\r\n   * Date format, that is displaying in toolbar.\r\n   */\r\n  toolbarFormat: PropTypes.string,\r\n\r\n  /**\r\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\r\n   * @default '–'\r\n   */\r\n  toolbarPlaceholder: PropTypes.node,\r\n\r\n  /**\r\n   * Mobile picker title, displaying in the toolbar.\r\n   * @default 'Select date range'\r\n   */\r\n  toolbarTitle: PropTypes.node,\r\n\r\n  /**\r\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\r\n   */\r\n  TransitionComponent: PropTypes.elementType,\r\n\r\n  /**\r\n   * The value of the date range picker.\r\n   */\r\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\r\n} : void 0;\r\nexport default DesktopDateRangePicker;"]},"metadata":{},"sourceType":"module"}